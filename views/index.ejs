<html>

<head>
  <title> HashCode Workstation </title>
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link rel="stylesheet" href="//fonts.googleapis.com/css?family=Roboto:300,300italic,700,700italic">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.css">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/milligram/1.3.0/milligram.css">
  <style>
    .main-container {
      padding-top: 20px;
      padding-bottom: 40px;
      max-width: 1200px;
    }

    @media only screen and (min-width: 600px) {
      .main-container {
        padding-left: 15%;
        padding-right: 15%;
      }
    }
  </style>
</head>

<body>
  <div class="container main-container">
    <div class="row" style="text-align: center;">
      <div class="column">
        <h1>Google HashCode Workstation</h1>
        <a href="https://codingcompetitions.withgoogle.com/hashcode" target="_blank">Go to Google HashCode 2020</a>
      </div>
    </div>
    <hr />
    <div class="row">
      <div class="column">
        <h2>Connect to Workstation</h2>
        <pre><code>ssh hc@hc.gcp.jevan.cc</code></pre>
      </div>
    </div>
    <hr />
    <div class="row">
      <div class="column">
        <h2>Current Optimal Solution</h2>
        <a class="button" href="/solution">Download Optimal Solution</a>
        <table>
          <tbody>
            <% Object.entries(optimalScore).forEach(([file, score]) => { %>
            <tr>
              <td style="width: 350px;"><%= file %></td>
              <td style="text-align: right;">
                <%= score.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") %>
              </td>
            </tr>
            <% }); %>
            <tr>
              <td style="font-weight: bold; width: 350px;">Total Score</td>
              <td style="font-weight: bold; text-align: right;">
                <%= totalScore.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") %>
              </td>
            </tr>
          </tbody>
        </table>

        <h3>Past Solutions</h3>
        <ol>
          <% pastSolutions.forEach((solution) => { %>
          <li><a href="/<%= solution %>"><%= solution %></a></li>
          <% }); %>
        </ol>
      </div>
    </div>
    <hr />
    <div class="row">
      <div class="column">
        <h2>HCRUN Guide</h2>
        <p>HCRUN is available on the workstation. You can also install on your computer and run it locally.</p>
        <h3>Installation</h3>
        <p>You need to install Node.js in order to use hcrun. You may find the download link
          <a href="https://nodejs.org/en/download/">here. </a></p>

        <p>Use the following command to install hcrun locally:</p>
        <pre><code>npm install -g <%= baseUrl %>/hcrun</code></pre>

        <h3>Run Program</h3>
        <p>
          HCRUN can run your program written in any language by specifying the command
          to run the program. For example, if you want want to run a binary named "./mysolver",
          you can type the following command:
        </p>
        <pre><code>hcrun -p "./mysolver"</code></pre>
        <p>
          or if your program is a Python file named "./mysolver.py", you can use the following command:
        </p>
        <pre><code>hcrun -p "python ./mysolver.py"</code></pre>
        <p>The test case input will be provided to your program through stdin.</p>

        <h3>Specify Test Case</h3>
        <p>
          By default, all the test cases will be runned and scored. You can specify the input you
          want to run with option <code>--input/-i</code>. For example, if you want to run test case "a", "b", and "c"
          only,
          you can run the following command:
        </p>
        <pre><code>hcrun -p "./mysolver" --input a,b,c</code></pre>
        <p>The input tokens are separated by commas without spaces between them.</p>

        <h3>Use Local Scorer</h3>
        <p>
          By default, all the output will be sent to the remote server for scoring and updating the optimal score.
          However, you may want to test your local scorer. You can use the option <code>--scorer</code> to specify
          the local scorer for evaluation. For example:
        </p>
        <pre><code>hcrun -p "./mysolver" --scorer "./myscorer"</code></pre>
        <p>
          Notice that even if local scorer is used for evaluation, the score would still be uploaded for
          recording optimal solution. If you don't want to update the remote solution, provide the option
          <code>--noupdate</code> to prevent overwriting the remote optimal solution.
        </p>
        <pre><code>hcrun -p "./mysolver" --scorer "./myscorer" --noupdate</code></pre>

        <h3>Non-Stop Mode</h3>
        <p>
          For stochastic search, you may want to keep runnning your program to find the optimal solution.
          In this case, you can provide option <code>--nonstop</code>:
        </p>
        <pre><code>hcrun -p "./mysolver" --nonstop</code></pre>
        <p>
          You can also specify the number of proceses you want to spawn and run simultaneously
          with option <code>--job/-j</code>.
        </p>
        <pre><code>hcrun -p "./mysolver" --nonstop --job 10</code></pre>
      </div>
    </div>
  </div>


</body>

</html>
